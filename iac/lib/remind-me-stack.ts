import * as cdk from "aws-cdk-lib";
import * as rds from "aws-cdk-lib/aws-rds";
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as ssm from "aws-cdk-lib/aws-ssm";
import * as constructs from "constructs";

export class RemindMeStack extends cdk.Stack {
  constructor(scope: constructs.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Create a VPC for your resources
    const vpc = new ec2.Vpc(this, "RemindMeVPC", {
      maxAzs: 2, // Adjust as needed
    });

    // Create an RDS database instance
    const dbInstance = new rds.DatabaseInstance(this, "RemindMeDB", {
      engine: rds.DatabaseInstanceEngine.postgres({
        version: rds.PostgresEngineVersion.VER_15_3, // Adjust the version
      }),
      instanceType: ec2.InstanceType.of(
        ec2.InstanceClass.BURSTABLE3,
        ec2.InstanceSize.MICRO
      ),
      vpc,
      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC }, // Adjust as needed
      publiclyAccessible: true,
      databaseName: "readme-db-instance",
    });

    // Adding a Table

    // Security Groups
    const securityGroups = dbInstance.connections.securityGroups;
    if (securityGroups && securityGroups.length > 0) {
      const defaultSecurityGroup = securityGroups[0];
      // Allow inbound traffic on the default PostgreSQL port (5432) from anywhere
      defaultSecurityGroup.addIngressRule(
        ec2.Peer.anyIpv4(),
        ec2.Port.tcp(5432),
        "Allow PostgreSQL inbound traffic"
      );
      defaultSecurityGroup.addIngressRule(
        ec2.Peer.anyIpv6(),
        ec2.Port.tcp(5432),
        "Allow PostgreSQL inbound traffic"
      );
    }

    // Use the credentials generated by the RDS instance to update the SSM parameter
    new ssm.StringParameter(this, "DBCredentials", {
      parameterName: "/myapp/database",
      stringValue: JSON.stringify({
        username: dbInstance
          .secret!.secretValueFromJson("username")
          .unsafeUnwrap(),
        password: dbInstance
          .secret!.secretValueFromJson("password")
          .unsafeUnwrap(),
        host: dbInstance.dbInstanceEndpointAddress,
        port: dbInstance.dbInstanceEndpointPort,
        name: dbInstance.instanceIdentifier,
      }),
    });
  }
}
